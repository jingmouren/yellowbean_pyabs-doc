建模
=====

建模的过程是把事实性的数据(比如债券信息，资产池，分配规则等)，传入到自带的类进行实例化的过程。

目前absbox支持 信贷ABS, 交易所ABS 两类。

.. _信贷ABS:

信贷ABS
------------
.. code-block:: python

   from absbox.local.china import 信贷ABS


产品要素
----------------
日期
^^^^

封包日/入池日:
  指 原始权益人 将 底层资产转移到SPV的当天。改日期之后所有资产的现金流的归属于SPV

起算日/起息日:
  指 产品 成立之后，负债端债券的起始计算利息的当日。

首次支付日:
  指 产品 成立之后，负债端第一次支付利息的当日。

建模时按照顺序 ``(封包日,起息日,首次支付日)`` 作为一个Python tuple用于描述产品的日期要素.
因为日期有着业务顺序含义，因此无需通过字典形式进行建模，而是一个tuple即可。

.. code-block:: python

  ("2022-01-01","2022-03-01","2022-05-01")
  # 表示 封包日=2022-01-01,起息日=2022-03-01,首次支付日=2022-05-01

费用
^^^^

费用类型包括
  * 一次性费用， 例如需要支付的承销费用。
  * 周期性费用 ，例如一年一次的跟踪评级费用
  * 按照比例产生的费用：
     * 例如按照资产池余额，或者债券余额作为基数的费用
     * 或者按照资产池利息作为基数的增值税计算费用

建模格式为： ``(费用名称 , {费用描述} )``

.. code-block:: python

  (("增值税",{"类型":{"百分比费率":["资产池当期利息",0.0325]}})
      ,("服务商费用",{"类型":{"年化费率":["资产池余额",0.02]}}))

资产池
^^^^
用一个列表表示资产的清单，目前资产清单包含 ``按揭贷款`` ``消费贷款`` ``租金合同`` ``企业贷款`` .

账户
^^^^
账户有两种，一种为普通账户，表示用于简单的现金收支

建模格式为 ``(账户名称,账户属性)``, 例如

.. code-block:: python

  (("本金分账户",{"余额":0})
   ,("收入分账户",{"余额":0}))

另外一种为 ``储备账户`` ，该类账户存在一个目标储备金额,其设置可以通过 ``账户属性`` 进行建模

目标储备金额: 有多种设置方式，例如

  * 单一值： 固定的绝对金额，例如，10000元
    ``("储备账户A",{"余额":0,"类型":{"固定储备金额":1000}})``
  * 公式值： 例如资产池余额的一个百分比，例如资产池余额的 2%
    ``("储备账户B",{"余额":0,"类型":{"目标储备金额":["资产池余额",0.015]}})``

  * 复合值： 例如为 单一值 公式值 两者取大，或者取小

    .. code-block:: python

      ("储备账户C",{"余额":0,"类型":{"较高":[
                                     {"目标储备金额":["资产池余额",0.015]}
                                    ,{"固定储备金额":100}]})
      ("储备账户D",{"余额":0,"类型":{"较低":[
                                     {"目标储备金额":["资产池余额",0.015]}
                                    ,{"固定储备金额":100}]})
      # 甚至可以进行多条件组合
      ("储备账户E",{"余额":0,"类型":{"较低":[{"较高":[
                                            {"目标储备金额":["资产池余额",0.015]}
                                            ,{"固定储备金额":100}]}
                                    ,{"固定储备金额":150}]})
债券
^^^^
建模格式为 ``(债券层级名称,属性)`` ， 其中 ``利率类型`` 分为三种
  * 固定利率   :code:`"利率":{"固定":0.0569}`
  * 浮动利率   :code:`"利率":{"浮动":["LPR5Y",-0.0169,"每月"]}`
  * 期间收益   :code:`"利率":{"期间收益":0.02}`

债券种类众多，包括过手摊还类，固定摊还，锁定类：

  * 过手摊还类： 较为常见利随本清式债券。
  * 固定摊还： 预定义固定摊还目标额，限定了每次兑付时候最大的本金还款额。
  * 锁定类： 预定义一个日期，该日期之前都不得偿还本金（可以偿还利息）

.. code-block:: python

    ("A1",{"当前余额":3_650_000_000
                             ,"当前利率":0.03
                             ,"初始余额":3_650_000_000
                             ,"初始利率":0.03
                             ,"起息日":"2020-01-03"
                             ,"利率":{"浮动":["LPR5Y",-0.0169,"每月"]}
                             ,"债券类型":{"过手摊还":None}
                            })
      ,("A2",{"当前余额":5_444_000_000
                             ,"当前利率":0.03
                             ,"初始余额":5_444_000_000
                             ,"初始利率":0.03
                             ,"起息日":"2020-01-03"
                             ,"利率":{"浮动":["LPR5Y",-0.0091,"每月"]}
                             ,"债券类型":{"过手摊还":None}
                            })
      ,("次级",{"当前余额":900_883_783.62
                             ,"当前利率":0.0
                             ,"初始余额":2_123_875_534.53
                             ,"初始利率":0.00
                             ,"起息日":"2020-01-03"
                             ,"利率":{"期间收益":0.02}  # 期间收益必须满足 2%
                             ,"债券类型":{"权益":None}
                            })



分配规则
^^^^

分配规则描述了一系列SPV资金的收取和支出的动作。包括

  * 支付费用
  * 支付债券利息
  * 支付债券本金
  * 支付债券期间收益
  * 账户转移



清仓回购
^^^^

you can use the ``lumache.get_random_ingredients()`` function:

.. autofunction:: lumache.get_random_ingredients

The ``kind`` parameter should be either ``"meat"``, ``"fish"``,
or ``"veggies"``. Otherwise, :py:func:`lumache.get_random_ingredients`
will raise an exception.

.. autoexception:: lumache.InvalidKindError

For example:

>>> import lumache
>>> lumache.get_random_ingredients()
['shells', 'gorgonzola', 'parsley']

