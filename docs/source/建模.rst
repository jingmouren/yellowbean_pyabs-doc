建模
****

建模的过程是把ABS事实性的数据(比如债券信息，资产池，分配规则等)，进行实例化的过程。

目前 ``absbox`` 支持 ``信贷ABS`` ,交易所的产品亦可以通过此类进行建模。

.. _信贷ABS:

信贷ABS
=======
.. code-block:: python

   from absbox.local.china import 信贷ABS


产品要素
=======
日期
--------

按照建模产品对象所处于的产品生命期间对日期进行设置。推荐使用字典方式。

对于未发行的产品建模： 

.. code-block:: python

  {"封包日":"2021-03-01","起息日":"2021-05-01","首次兑付日":"2021-06-26"
   ,"法定到期日":"2060-12-01","收款频率":"月末","付款频率":["每月",26]} 


对于已经存续的产品建模：

.. code-block:: python

  {"回收期期初日":"2021-03-01","起息日":"2021-05-01","首次兑付日":"2021-06-26"
   ,"法定到期日":"2060-12-01","收款频率":"月末","付款频率":["每月",26]} 


* ``收款频率``

  * "月末"
  * "季度末"
  * "年末"
  * "月初"
  * "季度初"
  * "年初"
  * ["每年",MM,DD]
  * ["每月",DD]

自定义日期
^^^^^^^^

针对非规则的收款频率和付款频率,用户可以自定义日期。

.. code-block:: python

    {"回款日":["2021-04-02","2021-05-26","2021-06-26","2022-01-26"]
     ,"分配日":["2021-04-15","2021-05-26","2021-07-26","2022-03-26"]
     ,"封包日":"2021-02-28","起息日":"2021-03-15"}

费用
--------

费用类型包括
  * 一次性费用, 例如需要支付的承销费用。
  * 周期性费用, 例如一年一次的跟踪评级费用,或者每个月产生的事务性费用
  * 按照 ``年化费率`` 产生的费用, 目前支持基数 
     *  ``资产池余额``
     * ``资产池初始余额`` 
     * ``债券余额`` 
  * 按照 ``百分比费率`` 产生的费用, 目前支持基数 
     * 或者按照 ``资产池利息`` ,作为基数的增值税计算费用
     * 或者按照 ``违约余额`` , 作为基数计算违约处置费用
  * 自定义费用，用户自由设定未来某个时间，某个金额进行偿付的费用。

建模格式为： ``(费用名称 , {费用描述} )``

示例为设定两个费用

  * 按照当期资产池利息金额乘以3.25%。
  * 按照资产池余额的年化2%收取当期费用。
  * 固定一次性费用 8元 
  * 每年 6月30日 产生 80000元费用

.. code-block:: python

  (("增值税",{"类型":{"百分比费率":["资产池回款","利息",0.0326]}})
  ,("服务商费用",{"类型":{"年化费率":["资产池余额",0.02]}})
  ,("承销费":{"类型":{"固定费用":8}})
  ,("评级跟踪费用":{"类型":{"周期费用":[["每年",6,30],80000]}})
  ,(("信托费用",{"类型":{"自定义":[("2021-09-26",5),("2021-11-26",4)]}}),)
  )

资产池
--------
用一个列表表示底层资产的清单，目前资产清单包含 ``按揭贷款`` ``消费贷款`` ``租金合同`` ``企业贷款`` .

按揭贷款

.. code-block:: python

  (["按揭贷款"
        ,{"放款金额":9961626400,"放款利率":"放款利率":["浮动",0.085,{"基准":"LPR5Y","利差":0.01,"重置频率":"每月"}],"初始期限":218
          ,"频率":"每月","类型":"等额本息","放款日":"2020-06-01"}
          ,{"当前余额":7596981800
          ,"当前利率":0.0495
          ,"剩余期限":165
          ,"状态":"正常"}]
      ,["按揭贷款"
        ,{"放款金额":330_977.45*10000,"放款利率":["固定",0.045],"初始期限":218
          ,"频率":"每月","类型":"等额本金","放款日":"2020-06-01"}
          ,{"当前余额":239_790.20*10000
          ,"当前利率":0.0495
          ,"剩余期限":165
          ,"状态":"正常"}])

账户
--------
账户有两种：
  * 普通账户 -> 表示用于简单的现金收支。
  * 储备账户 -> 储备账户可以锚定一个储备金额数值。在存入金额和取出时，按照预定锚定的金额进行留存。

建模格式为 ``(账户名称,账户属性)``, 例如

.. code-block:: python

  (("本金分账户",{"余额":0})
   ,("收入分账户",{"余额":0}))

储备账户
^^^^^^^^ 

另外一种为 ``储备账户`` ，该类账户存在一个目标储备金额,其设置可以通过 ``账户属性`` 进行建模

目标储备金额: 有多种设置方式，例如

  * 单一值： 固定的绝对金额，例如，10000元
    ``("储备账户A",{"余额":0,"类型":{"固定储备金额":1000}})``
  * 公式值： 例如资产池余额的一个百分比，例如资产池余额的 2%
    ``("储备账户B",{"余额":0,"类型":{"目标储备金额":["资产池余额",0.015]}})``

  * 复合值： 例如为 单一值 公式值 两者取大，或者取小

    .. code-block:: python

      ("储备账户C",{"余额":0,"类型":{"较高":[
                                     {"目标储备金额":["资产池余额",0.015]}
                                    ,{"固定储备金额":100}]})

      ("储备账户D",{"余额":0,"类型":{"较低":[
                                     {"目标储备金额":["资产池余额",0.015]}
                                    ,{"固定储备金额":100}]})

      # 甚至可以进行多条件组合
      ("储备账户E",{"余额":0,"类型":{"较低":[{"较高":[
                                            {"目标储备金额":["资产池余额",0.015]}
                                            ,{"固定储备金额":100}]}
                                  ,{"固定储备金额":150}]})

      # 通过使用公式，储备金额可以锚定任何统计数据：当前 应付利息和费用的 1 倍                                      
      ("储备账户F",{"余额":0,"类型":{"目标储备金额":
                                     [["合计"
                                       ,("当期未付债券利息",["A1"])
                                       ,("当期未付费用",['增值税'])]
                                   ,1.0]}})

      # 也可以通过 <判断条件> 对储备金额进行分段 
      ("储备账户",{"余额":0
                 ,"类型":{"分段":
                            [["<=","2021-10-01"]
                             ,{"固定储备金额":15}
                             ,{"固定储备金额":10}]}})                              



账户计息/投资收益 
^^^^^^^^^^^^^^^
   
通过 ``计息`` 关键字描述账户的活期利息或者投资收益。

.. code-block:: python

    (("账户01",{"余额":100, 
               "计息":{"周期":"月末"
                     ,"利率":0.03
                     ,"最近结息日":"2021-06-15"}})

如果账户收益和某个利率曲线挂钩，如下 

.. code-block:: python

    (("账户01",{"余额":100, 
               "计息":{"周期":"月末"
                     ,"利率":"LPR5Y"
                     ,"利差":0.03
                     ,"最近结息日":"2021-06-15"}})

债券
--------

建模格式为 ``(债券层级名称,属性)`` ， 其中 ``利率类型`` 分为三种

  * 固定利率   :code:`"利率":{"固定":0.0569}`
  * 浮动利率   :code:`"利率":{"浮动":["LPR5Y",-0.0169,"每月"]}`
  * 期间收益   :code:`"利率":{"期间收益":0.02}`

债券种类众多，包括 ``过手摊还类`` ，``固定摊还`` ，``锁定类`` , ``权益类``：

  * 过手摊还类： 较为常见利随本清式债券。
  * 固定摊还： 预定义固定摊还目标额，限定了每次兑付时候最大的本金还款额。
  * 锁定类： 预定义一个日期，该日期之前都不会偿还本金
  * 权益：  权益类债券，用于次级证券建模, 可以支付超额收益。

.. code-block:: python

    ("A1",{"当前余额":3_650_000_000
                             ,"当前利率":0.03
                             ,"初始余额":3_650_000_000
                             ,"初始利率":0.03
                             ,"起息日":"2020-01-03"
                             ,"利率":{"浮动":["LPR5Y",-0.0169,"每月"]}
                             ,"债券类型":{"过手摊还":None}
                            })
      ,("A2",{"当前余额":5_444_000_000
                             ,"当前利率":0.03
                             ,"初始余额":5_444_000_000
                             ,"初始利率":0.03
                             ,"起息日":"2020-01-03"
                             ,"利率":{"浮动":["LPR5Y",-0.0091,"每月"]}
                             ,"债券类型":{"过手摊还":None}
                            })
      ,("次级",{"当前余额":900_883_783.62
                             ,"当前利率":0.0
                             ,"初始余额":2_123_875_534.53
                             ,"初始利率":0.00
                             ,"起息日":"2020-01-03"
                             ,"利率":{"期间收益":0.02}  # 期间收益必须满足 2%
                             ,"债券类型":{"权益":None}
                            })


<判断条件>
--------

判断条件，可以用于 ``分配规则`` 构造选择性的支付动作。 可以用于 ``储备账户`` 用于构造 不同条件下的目标储备金额 

``判断条件`` 包括为：

  * ``[<公式>,">",数值]``  -> 只有 ``公式``大于数值时，才会执行后续分配动作
  * ``[<公式>,"<",数值]`` -> 只有 ``公式``小于数值时，才会执行后续分配动作
  * ``[<公式>,">=",数值]`` -> 只有 ``公式``大于等于数值时，才会执行后续分配动作
  * ``[<公式>,"<=",数值]`` -> 只有 ``公式``小于等于数值时，才会执行后续分配动作
  * ``[<公式>,"=",数值]`` -> 只有 ``公式``等于数值时，才会执行后续分配动作
  * ``["同时满足",<分配条件1>,<分配条件2>]`` -> 只有所有条件满足后，才会执行后续分配动作
  * ``["任意满足",<分配条件1>,<分配条件2>]`` -> 任意条件满足后，会执行后续分配动作
  * ``["<",指定日期]`` -> 当前日期早于特定日期时
  * ``[">",指定日期]`` -> 当前日期晚于特定日期时
  * ``["<=",指定日期]`` -> 当前日期早于特定日期(含)时
  * ``[">=",指定日期]`` -> 当前日期晚于特定日期(含)时
  * ``["状态",<产品状态>]`` -> 当产品处于某种状态时
  * ``["同时满足",<判断条件1>,<判断条件2>]`` -> 当所有判断条件都满足时
  * ``["任一满足",<判断条件1>,<判断条件2>]`` -> 当任一判断条件满足时



分配规则
--------

分配规则由 一系列的 ``分配动作`` 和 ``分配条件`` 组成 

分配动作 
^^^^^^^^

分配规则描述了一系列SPV资金的收取和支出的动作。包括

  * 支付费用

    * 格式为 ``["支付费用", [资金来源账户列表], [需要支付的费用列表]]`` 其中，
      
      *  ``[资金来源账户列表]``   -> 按照顺序，首先从第一个账户获取可用资金进行支付，以此类推
         
      *  ``[需要支付的费用列表]`` -> 按照列表中的费用，同顺序按照应付比例进行支付

  * 支付费用限额

    * 相比于 ``支付费用`` , 在最后新增一个map列表,用于描述支付费用的上限形式

      * ``应计费用百分比`` , 限制支付应计费用的比例上限
      * ``应计费用金额`` ,  限制支付应计费用的绝对金额
      示例 ``["支付费用限额",["收入分账户"],["服务商费用"],{"应计费用百分比":0.1}]``
  
  * 支付费用收益
    
    * ``[支付费用收益, [资金来源账户列表], [需要支付的费用列表]]`` 把账户内所有金额支付至费用，作为报酬。

    * ``["支付费用收益", [资金来源账户列表], [需要支付的费用列表],{"余额百分比": pct}/{"金额上限": amt}]`` 按照账户余额或者金额上限支付报酬

  * 支付债券利息

    * 格式为 ``["支付利息", 资金来源账户, [需要支付的债券列表] ]``

  * 支付债券本金

    * 格式为 ``["支付本金", 资金来源账户, [需要支付的债券列表] ]``
  
  * 支付剩余债券本金
  
    此行为无论如何都会支付本金，不管是否存在固定摊还的余额限制。

    * 格式为 ``["支付剩余本金", 资金来源账户, [需要支付的债券列表] ]``
  
  * 支付债券收益
  
    一般用于劣后债券的超额收益支付 
  
    * 格式为 ``["支付收益", 资金来源账户, [需要支付的债券列表] ]``

  * 支付债券期间收益

    * 格式为 ``["支付期间收益", 资金来源账户, [需要支付的债券列表] ]``

  * 账户转移
   
    * 格式为 ``["账户转移", 资金来源账户, 目标转入账户 ]``
  
  * 储备账户转移
   
    * 格式为 ``["储备账户转移", 资金来源账户, 目标转入账户, "源储备"|"目标储备" ]``
  
  * 出售资产
   
    * 格式为 ``["出售资产", 计价方式, 目标转入账户 ]``
  
  * 流动性支持 
  
    * 格式为  ``["流动性支持", 增信方名称, 目标转入账户, (?公式) ]`` 
  
  * 流动性支持偿还 

    * 格式为  ``["流动性支持偿还", 目标转出账户, 增信方名称 ]`` 

  * 流动性支持报酬

    * 格式为  ``["流动性支持报酬", 目标转出账户, 增信方名称 ]`` 
  
  * 计提费用/利息
      
    * 格式为  ``["计提费用", 费用名字A, 费用名字B ]`` 
    * 格式为  ``["计提利息", 债券名字A, 债券名字B ]`` 
      
分配条件
^^^^^^^^
分配条件用于确定 ``分配动作`` 是否执行。

格式为 
  * ``[<判断条件>，<分配动作>]``
  * ``[<判断条件>，<分配动作1>，<分配动作2>，<分配动作3>....]``



分配规则位置
^^^^^^^^


建模方式为一个map, 支持的key为:

  * ``未违约``, 表示动作只有在 处于非违约状态的情况下，在债券支付日执行。
  * ``回款后``, 表示动作只有在 资产池搜集回款后执行。
  * ``清仓回购``, 表示动作只有在 清仓回购条件触发后执行。


示例：

.. code-block:: python

    ,{"未违约":[
         ["支付费用",["收入分账户"],["执行费用"]]
         ,["支付费用限额",["收入分账户"],["服务商费用"],{"应计费用百分比":0.1}]
         ,["支付利息","收入分账户",["A1","A2"]]
         ,["支付费用",["收入分账户"],["服务商费用"]]
         ,["支付期间收益","收入分账户",["次级"]]
         ,["账户转移","收入分账户","本金分账户"]
         ,["支付本金","本金分账户",["A1"]]
         ,["支付本金","本金分账户",["A2"]]
         ,["支付本金","本金分账户",["次级"]]
         ,["支付收益","本金分账户","次级"]]
     ,"回款后":[["支付费用",["收入分账户"],["增值税"]]]
     ,"清仓回购":[....]
     }

信用事件
---------

产品信用事件建模包括3个要素:

* <什么时候> 进行计算信用事件?
* 信用事件的 <触发条件>?
* 信用事件的 <触发效果>?

以下就是典型的建模, 整个风险建模事件是一个map

* 其中 key -> 什么时候进行计算? ``absbox`` 4个时间点进行计算:
  
  * ``回收后`` : 回收资产池现金 之后
  * ``回收动作后``: 完成 回收动作 之后
  * ``分配前``: 开始进行 分配 之前 
  * ``分配后``: 结束 分配 之后 

* 其中 value -> 列表类型,包含一系列信用事件
  
  * 信用事件 -> [``触发条件``, ``触发效果``]

例如:

.. code-block:: python

  {"分配后":[
            [[("债券低于目标余额","A1") ,">",0]  # 触发条件 
            ,("新状态","加速清偿")]              # 触发效果-> 进入 加速清偿状态.
           ]}

触发条件
^^^^^^^^^^
``absbox`` 支持多种风险事件建模,其中 ``触发条件`` 包括:

* <公式>,具体数值/曲线,比较 

格式为: ``[ <公式>, <比较>, <数值/曲线>]``

  * 公式 -> 就是那个 <公式>
  * 比较 -> ``>`` , ``>=`` , ``<`` , ``<=``
  * 数值/曲线 -> 一个数值/曲线


较为常见的案例是 按照违约率进行信用事件触发.

.. code-block:: python

  {"分配前":[
            [[("资产池累积违约率",) ,">",0.03]   # 触发条件 
            ,("新状态","加速清偿")]              # 触发效果-> 进入 加速清偿状态.
           ]}

  {"分配前":[
            [[("资产池累积违约率",) ,">",[["2021-05-31",0.01],
                                       ["2022-05-31",0.02]]]   # 触发条件 
            ,("新状态","加速清偿")]              # 触发效果-> 进入 加速清偿状态.
           ]}


* 日期相关: 当产品进入某个日期时触发.

格式为: ``[ <比较> ,<日期> ]``

  * 比较 -> ``>`` , ``>=``
  * 日期 -> ``20221201``


* 信用事件的组合嵌套 

和公式一样,<信用事件> 可以进行自我嵌套,从而实现复杂的建模.

其中包含:
  * ["所有满足",<触发条件1>,...<触发条件 N>] -> 只有所有触发条件满足时才触发 
  * ["任一满足",<触发条件1>,...<触发条件 N>] -> 只要任一触发条件满足时触发 

示例为: 
 .. code-block:: python

  {"分配后":[
            [["所有满足",
              [("债券低于目标余额","A1") ,">",0],
              [">=","20220901"]
              ]                                # 触发条件 
            ,("新状态","加速清偿")]              # 触发效果
           ]}

  # 深度嵌套 
  {"分配后":[
            [["所有满足",
              [("债券低于目标余额","A1") ,">",0],
              [">=","20220901"]
              ["任一满足",
                [">=","20220901"],
                [("账户余额","储备账户"),"<",100]
                ]
              ]                                # 触发条件 
            ,("新状态","加速清偿")]              # 触发效果
           ]}

触发效果 
^^^^^^^^

<效果>包括:

* 新的产品状态,比如 ``违约`` , ``加速清偿``, 
* 计提费用 
* 新增一个后续信用事件 
* 多个<效果>组合

比较常见的案例是,当资产池的违约率触发某个阈值时候,产品就进入了 ``违约`` 或者 ``加速清偿`` 状态
从而产品的分配顺序也随之改变.


第三方增信 
--------

流动性支持
^^^^^^^^

.. code-block:: python
    
    # 当前流动性支持额度为 20元，之后，每年10月25日，流动性额度重新提升到 10元。
    {"流动性支持方A":{"类型":{"日期":["每年",10,25],"限额":10}
                   ,"额度":20}}

    # 当前流动性支持方额度为 25元，总额度为 120元。
    {"流动性支持方B":{"类型":{"总额度":120}
                   ,"额度":25}}

    # 无额度限制的流动性提供
    {"发起人":{"类型":"无限制"}}

* 流动性支持的获取

  以流动性提供的额度为限制,将金额存入账户,存入的金额以<公式>为限制.

.. code-block:: python 

  ["流动性支持","流动性支持方名称","账户01",<公式>]


* 流动性支持的偿还 
  
  执行后将会把所有流动性支持的总金额还清.

.. code-block:: python 

  ["流动性支持偿还","账户01","流动性支持方名称"]

* 流动性支持的报酬
  
  不受限于 过往的流动支持金额限制,将现金支付给流动性支持方.

.. code-block:: python 

  ["流动性支持报酬","账户01","流动性支持方名称"]



<公式>
--------

``absbox`` 最强大的地方在于一套规范的公式计算语法。语法结合Lisp的语法和递归思想的影响，实现多层嵌套，完成产品各项指标计算。

公式变量 
^^^^^^^^

公式内容包括  
  * ("债券余额",): 
  * ("资产池余额",):
  * ("初始债券余额",):
  * ("初始资产池余额",):
  * ("债券系数",):   -> 债券剩余比率
  * ("资产池系数",):  -> 资产池剩余比例 
  * ("所有账户余额",):
  * ("账户余额",<账户1>,...<账户N>):
  * ("系数",<公式>,系数): -> 将 `公式` 乘以 一个系数。
  * ("债券余额",[<债券ID>]):
  * ("债券低于目标余额",<债券ID>):
  * ("债券待付利息",<债券ID1>...<债券ID N>):
  * ("债券已付利息",<债券ID1>...<债券ID N>):
  * ("待付费用",<费用ID1>...<费用ID N>):
  * ("已付费用",<费用ID1>...<费用ID N>):
  * ("储备账户缺口",<账户名称1>):
  * ("Min",<公式1>,<公式2>):
  * ("Max",<公式1>,<公式2>):
  * ("合计",<公式1>...<公式 N>):
  * ("差额",<公式1>...<公式 N>):
  * ("常数",n):
  * ("自定义",<自定义变量名称>):
            

<自定义数据>
--------

通过字典方式描述自定义数据。在结构设计中，用户可以通过名称在 `费用基数/账户留存目标金额/分配规则` 中引用自定义数据。

自定义常量 
^^^^^^^^

.. code-block:: python
    
    "目标超额担保金额":{"常量":655_396_658.24} 

自定义曲线 
^^^^^^^^

.. code-block:: python
    
    "收益补充超额担保金额":
          {"余额曲线":[("2022-10-01",63322258.41)
                      ,("2022-11-01",50234030.96)
                      ,("2022-12-01",38881437.99)
                      ,("2023-01-01",29197182.73)
                      ,("2023-02-01",21089455.64)
                      ,("2023-03-01",14475798.7)
                      ,("2023-04-01",9227206.729)
                      ,("2023-05-01",5329504.123)
                      ,("2023-06-01",2671007.271)
                      ,("2023-07-01",1063561.6)
                      ,("2023-08-01",262786.9647)
                      ,("2023-09-01",0)]}

自定义公式 
^^^^^^^^

.. code-block:: python

    "资产池调整后余额":{"公式":("差额",
                             ("资产池余额",),
                             ("自定义","收益补充超额担保金额"))}

建模示例
=======

简单优先/劣后结构
----------------

  * 简单 优先劣后结构 
  * 固定费用 （一次性产生等待付清），例如承销费用
  
.. literalinclude:: deal_sample/test01.py
   :language: python
   :linenos:
   :emphasize-lines: 31-36

附带固定摊还的债券建模
---------------------

.. literalinclude:: deal_sample/test02.py
   :language: python
   :linenos:
   :emphasize-lines: 22-24

次级分润模式 
------------

当进行清仓回购的时候，剩余资金按照 3：7 分成比例支付给次级投资者和服务商。

.. literalinclude:: deal_sample/test03.py
   :language: python
   :linenos:
   :emphasize-lines: 42-43


某建元(债券浮动利率)
-------------------

.. literalinclude:: deal_sample/test04.py
   :language: python
   :linenos:
   :emphasize-lines: 24,32,40


某工元(期间收益债券)
--------------------

.. literalinclude:: deal_sample/test05.py
   :language: python
   :linenos:
   :emphasize-lines: 44,55

某存量建元(带清仓回购) 
----------------------

.. literalinclude:: deal_sample/test06.py
   :language: python
   :linenos:
   :emphasize-lines: 76


盛世融迪2021年第二期个人汽车抵押贷款(现金流归集表建模)
-----------------------------------------------
依据第十期受托报告建立，
  * 假设次级的获取所有剩余收益
  * 假设不产生各项报销费用
  * 假设服务商费用年化 0.12%
  * 清仓回购对于正常资产按照 余额进行出售。

本案例假设使用现金流归集表进行建模。

.. literalinclude:: deal_sample/test07.py
   :language: python
   :linenos:
   :emphasize-lines: 8-43

吉时代2022年第三期个人汽车抵押贷款资产支持证券(流动性储备账户)
-----------------------------------------------------
按照发行说明书建立,

* 储备账户金额 为下列两者取高 
   * 资产池余额百分之0.9 
   * 当期应付费用和利息之和3倍 

.. literalinclude:: deal_sample/test08.py
   :language: python
   :linenos:
   :emphasize-lines: 61-67

基于条件的分配执行
-----------------

在分配动作中，当我们把 `[<分配动作>]` 改成 `[[<分配条件>],[<分配动作>]]` 之后，
只有 `[<分配条件>]` 满足的情况下，才会执行后面的分配动作

.. literalinclude:: deal_sample/test09.py
   :language: python
   :linenos:
   :emphasize-lines: 37-39

自定义收款日/分配日 
-----------------
用户可以通过自定义收款日和分配日对现金流进行测算 

* 对于中国的一些节假日调整 
* 特殊的交易条款安排 

另外日期可以通过带有关键字字典传入。 


.. literalinclude:: deal_sample/test10.py
   :language: python
   :linenos:
   :emphasize-lines: 5-7

计息账户/投资账户 
-------------------
用户可以设定账户的结算利息情况，

* 用于模拟现实银行的活期利息计算 (基于固定利率) 
* 用于模拟投资账户的再投资 (基于曲线)

.. literalinclude:: deal_sample/test11.py
   :language: python
   :linenos:
   :emphasize-lines: 14

建元2019年第十一期个人住房抵押贷款资产支持证券 
--------

.. collapse:: 点击展开

  .. literalinclude:: deal_sample/test12.py
     :language: python
     :linenos:



ABCD公式转移
------------

ABCD 是在中国信贷市场常见的账户转移公式。
`absbox` 自带强大的公式定义功能，请参见（30-39），用户可以利用各项变量组合成公式。

.. literalinclude:: deal_sample/test13.py
   :language: python
   :linenos:
   :emphasize-lines: 32-41,44


流动性支持建模
------------

流动性支持 指一个第三方主体，为了保证平滑ABS产品的本息兑付，
因此在一定额度下，第三方对ABS的 ``账户/债券利息/费用`` 进行资金垫付行为。
设计上，垫付金额应当在下一次回款后偿还。

.. literalinclude:: deal_sample/test14.py
   :language: python
   :linenos:
   :emphasize-lines: 14-19,40-41,54


速利银丰 2021 年第一期个人汽车抵押贷款支持证券
----------------------------------------

  * 公式嵌套
  * 自定义数据 
  * 账户投资收益 
  * 储备账户按照条件进行设定目标储备金额 
  * 代理支付费用
  * 无限制流动性支持 


.. literalinclude:: deal_sample/test15.py
   :language: python
   :linenos:
   :emphasize-lines: 44-49,50,72,73,77,82,93,86-92,96-98,108-122,107


分段储备金额
-----------

可以通过某种  ``<判断条件>``，选择不同的 账户储备金额 

.. literalinclude:: deal_sample/test16.py
   :language: python
   :linenos:
   :emphasize-lines: 14-18

自定义不规则费用
---------------

根据非规则的费用， 用户可以自定义时间和金额。

.. literalinclude:: deal_sample/test17.py
   :language: python
   :linenos:
   :emphasize-lines: 30

信用风险时间案例1
---------------

* 设定信用风险事件的触发条件,以及触发后的后果.
* 本案例是当固定摊还债券无法在当期摊销到目标余额时,产品进入"加速清偿状态",随之后续的分配动作就按照预先设定的"加速清偿"的分配顺序进行分配.
* 可以观察到债券B在0926之后不再接受分配.

.. literalinclude:: deal_sample/test18.py
   :language: python
   :linenos:
   :emphasize-lines: 42-45,55-58



建模文件保存/读取
=======
建议通过python自带的 ``pickle`` 包对建模文件进行存储。

保存
--------
建模的内容可以通过调用 ``save()`` 方法将内容保存至本地文件夹。

.. code-block:: python

  ...
  from absbox import API,save
  deal = .... #
  save(deal,"path/to/file")

读取
--------
建模的内容可以通过调用 ``load()`` 方法将内容保存至本地文件夹。

.. code-block:: python

  ...
  from absbox.local.china import 信贷ABS
  信贷ABS.load("path/to/file")
