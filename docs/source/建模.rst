建模
=====

建模的过程是把ABS事实性的数据(比如债券信息，资产池，分配规则等)，进行实例化的过程。

目前``absbox`` 支持 ``信贷ABS`` 类。

.. _信贷ABS:

信贷ABS
------------
.. code-block:: python

   from absbox.local.china import 信贷ABS


产品要素
----------------
日期
^^^^

封包日/入池日:
  指 原始权益人 将 底层资产转移到SPV的当天。该日期之后所有资产的现金流的归属于SPV

起算日/起息日:
  指 产品 成立之后，负债端债券的起始计算利息的日期。

首次支付日:
  指 产品 成立之后，负债端第一次支付利息/本金的日期。

建模时按照顺序，通过建立一个tuple ``(封包日,起息日,首次支付日)`` 用于描述产品的日期要素.
因为日期有着业务顺序含义，因此无需通过字典形式进行建模，而是一个tuple即可。

.. code-block:: python

  ("2022-01-01","2022-03-01","2022-05-01")
  # 表示 封包日=2022-01-01,起息日=2022-03-01,首次支付日=2022-05-01

费用
^^^^

费用类型包括
  * 一次性费用, 例如需要支付的承销费用。
  * 周期性费用, 例如一年一次的跟踪评级费用,或者每个月产生的事务性费用
  * 按照比例产生的费用
     * 例如按照``资产池余额``,或者``债券余额``作为基数的费用，计算年化费用
     * 或者按照``资产池利息``,作为基数的增值税计算费用
     * 或者按照``违约余额``, 作为基数计算违约处置费用

建模格式为： ``(费用名称 , {费用描述} )``

示例为设定两个费用，一个按照当期资产池利息金额乘以3.25%。另外一个按照资产池余额的年化2%收取当期费用。

.. code-block:: python

  (("增值税",{"类型":{"百分比费率":["资产池当期利息",0.0325]}})
      ,("服务商费用",{"类型":{"年化费率":["资产池余额",0.02]}}))

资产池
^^^^
用一个列表表示底层资产的清单，目前资产清单包含 ``按揭贷款`` ``消费贷款`` ``租金合同`` ``企业贷款`` .

按揭贷款

.. code-block:: python

  (["按揭贷款"
        ,{"放款金额":9961626400,"放款利率":0.0495,"初始期限":218
          ,"频率":"每月","类型":"等额本息","放款日":"2020-06-01"}
          ,{"当前余额":7596981800
          ,"当前利率":0.0495
          ,"剩余期限":165}]
      ,["按揭贷款"
        ,{"放款金额":330_977.45*10000,"放款利率":0.0495,"初始期限":218
          ,"频率":"每月","类型":"等额本金","放款日":"2020-06-01"}
          ,{"当前余额":239_790.20*10000
          ,"当前利率":0.0495
          ,"剩余期限":165}])

账户
^^^^
账户有两种：
  * 普通账户，表示用于简单的现金收支。
  * 储备账户，储备账户可以锚定一个储备金额数值。在存入金额和取出时，按照预定锚定的金额进行留存。

建模格式为 ``(账户名称,账户属性)``, 例如

.. code-block:: python

  (("本金分账户",{"余额":0})
   ,("收入分账户",{"余额":0}))

另外一种为 ``储备账户`` ，该类账户存在一个目标储备金额,其设置可以通过 ``账户属性`` 进行建模

目标储备金额: 有多种设置方式，例如

  * 单一值： 固定的绝对金额，例如，10000元
    ``("储备账户A",{"余额":0,"类型":{"固定储备金额":1000}})``
  * 公式值： 例如资产池余额的一个百分比，例如资产池余额的 2%
    ``("储备账户B",{"余额":0,"类型":{"目标储备金额":["资产池余额",0.015]}})``

  * 复合值： 例如为 单一值 公式值 两者取大，或者取小

    .. code-block:: python

      ("储备账户C",{"余额":0,"类型":{"较高":[
                                     {"目标储备金额":["资产池余额",0.015]}
                                    ,{"固定储备金额":100}]})
      ("储备账户D",{"余额":0,"类型":{"较低":[
                                     {"目标储备金额":["资产池余额",0.015]}
                                    ,{"固定储备金额":100}]})
      # 甚至可以进行多条件组合
      ("储备账户E",{"余额":0,"类型":{"较低":[{"较高":[
                                            {"目标储备金额":["资产池余额",0.015]}
                                            ,{"固定储备金额":100}]}
                                    ,{"固定储备金额":150}]})
债券
^^^^

建模格式为 ``(债券层级名称,属性)`` ， 其中 ``利率类型`` 分为三种

  * 固定利率   :code:`"利率":{"固定":0.0569}`
  * 浮动利率   :code:`"利率":{"浮动":["LPR5Y",-0.0169,"每月"]}`
  * 期间收益   :code:`"利率":{"期间收益":0.02}`

债券种类众多，包括过手摊还类，固定摊还，锁定类：

  * 过手摊还类： 较为常见利随本清式债券。
  * 固定摊还： 预定义固定摊还目标额，限定了每次兑付时候最大的本金还款额。
  * 锁定类： 预定义一个日期，该日期之前都不不会偿还本金
  * 权益：  权益类债券，用于次级证券建模。

.. code-block:: python

    ("A1",{"当前余额":3_650_000_000
                             ,"当前利率":0.03
                             ,"初始余额":3_650_000_000
                             ,"初始利率":0.03
                             ,"起息日":"2020-01-03"
                             ,"利率":{"浮动":["LPR5Y",-0.0169,"每月"]}
                             ,"债券类型":{"过手摊还":None}
                            })
      ,("A2",{"当前余额":5_444_000_000
                             ,"当前利率":0.03
                             ,"初始余额":5_444_000_000
                             ,"初始利率":0.03
                             ,"起息日":"2020-01-03"
                             ,"利率":{"浮动":["LPR5Y",-0.0091,"每月"]}
                             ,"债券类型":{"过手摊还":None}
                            })
      ,("次级",{"当前余额":900_883_783.62
                             ,"当前利率":0.0
                             ,"初始余额":2_123_875_534.53
                             ,"初始利率":0.00
                             ,"起息日":"2020-01-03"
                             ,"利率":{"期间收益":0.02}  # 期间收益必须满足 2%
                             ,"债券类型":{"权益":None}
                            })



分配规则
^^^^

分配规则描述了一系列SPV资金的收取和支出的动作。包括

  * 支付费用

    * 格式为 ``["支付费用", [资金来源账户列表], [需要支付的费用列表]]``
    其中，
      *  [资金来源账户列表]   -> 按照顺序，首先从第一个账户获取可用资金进行支付，以此类推
      *  [需要支付的费用列表] -> 按照列表中的费用，同顺序按照应付比例进行支付

  * 支付费用限额

    * 相比于 ``支付费用`` , 在最后新增一个map列表,用于描述支付费用的上限形式

      * ``应计费用百分比`` , 限制支付应计费用的比例上限
      * ``应计费用金额`` ,  限制支付应计费用的绝对金额
      示例 ``["支付费用限额",["收入分账户"],["服务商费用"],{"应计费用百分比":0.1}]``

  * 支付债券利息

    * 格式为 ``["支付利息", 资金来源账户, [需要支付的债券列表] ]``

  * 支付债券本金

    * 格式为 ``["支付本金", 资金来源账户, [需要支付的债券列表] ]``

  * 支付债券期间收益

    * 格式为 ``["支付期间收益", 资金来源账户, [需要支付的债券列表] ]``

  * 账户转移

    * 格式为 ``["支付费用", 资金来源账户, 目标转入账户 ]``

建模方式为一个map, 支持的key为:

  * ``违约前``, 表示动作只有在 处于非违约状态的情况下，在债券支付日执行。
  * ``回款后``, 表示动作只有在 刚刚从资产池搜集回款后执行。


示例：

.. code-block:: python

    ,{"违约前":[
         ["支付费用",["收入分账户"],["执行费用"]]
         ,["支付费用限额",["收入分账户"],["服务商费用"],{"应计费用百分比":0.1}]
         ,["支付利息","收入分账户",["A1","A2"]]
         ,["支付费用",["收入分账户"],["服务商费用"]]
         ,["支付期间收益","收入分账户",["次级"]]
         ,["账户转移","收入分账户","本金分账户"]
         ,["支付本金","本金分账户",["A1"]]
         ,["支付本金","本金分账户",["A2"]]
         ,["支付本金","本金分账户",["次级"]]
         ,["支付收益","本金分账户","次级"]]
     ,"回款后":[["支付费用",["收入分账户"],["增值税"]]]}

建模示例
---------

案例1
^^^^^

.. code-block:: python

    test01 = 信贷ABS(
        "TEST01"
        ,("2021-03-01","2021-10-15","2021-11-26")
        ,"每月"
        ,(["按揭贷款"
            ,{"放款金额":120,"放款利率":0.08,"初始期限":30
              ,"频率":"每月","类型":"等额本金","放款日":"2020-06-01"}
              ,{"当前余额":120
              ,"当前利率":0.08
              ,"剩余期限":10}],
         )
        ,(("账户01",{"余额":0}),)
        ,(("A1",{"当前余额":100
                 ,"当前利率":0.07
                 ,"初始余额":100
                 ,"初始利率":0.07
                 ,"起息日":"2020-01-03"
                 ,"利率":{"固定":0.08}
                 ,"债券类型":{"过手摊还":None}
                 })
          ,("B",{"当前余额":20
                 ,"当前利率":0.0
                 ,"初始余额":100
                 ,"初始利率":0.07
                 ,"起息日":"2020-01-03"
                 ,"利率":{"固定":0.00}
                 ,"债券类型":{"权益":None}
                 }))
        ,tuple()
        ,{"违约前":[
             ["支付利息","账户01",["A1"]]
             ,["支付本金","账户01",["A1"]]
             ,["支付本金","账户01",["B"]]
             ,["支付收益","账户01","B"]
        ]
         ,"回款后":[]}
        ,(["利息回款","账户01"]
          ,["本金回款","账户01"]
          ,["早偿回款","账户01"]
          ,["回收回款","账户01"])
        ,None
    )


某建元
^^^^^

.. code-block:: python

    信贷ABS(
        "建元"
        ,("2022-10-02","2022-10-02","2022-11-02")
        ,"每月"
        ,(["按揭贷款"
            ,{"放款金额":18_000_000_000,"放款利率":0.04,"初始期限":180
              ,"频率":"每月","类型":"等额本息"}
              ,{"当前余额":17_000_000_000
              ,"当前利率":0.04
              ,"剩余期限":180}],)
        ,(("本金分账户",{"余额":0})
          ,("储备账户",{"余额":0})
          ,("收入分账户",{"余额":0})
          ,("信托税收",{"余额":0}))
        ,(("A1",{"当前余额":3_000_000_000
                                 ,"当前利率":0.03
                                 ,"初始余额":3_000_000_000
                                 ,"初始利率":0.03
                                 ,"起息日":"2020-01-03"
                                 ,"利率":{"浮动":["LPR5Y",0.01,"每月"]}
                                 ,"债券类型":{"过手摊还":None}
                                })
          ,("A2",{"当前余额":5_000_000_000
                                 ,"当前利率":0.03
                                 ,"初始余额":5_000_000_000
                                 ,"初始利率":0.03
                                 ,"起息日":"2020-01-03"
                                 ,"利率":{"浮动":["LPR5Y",0.01,"每月"]}
                                 ,"债券类型":{"过手摊还":None}
                                })
          ,("A3",{"当前余额":6_999_000_000
                                 ,"当前利率":0.03
                                 ,"初始余额":5_000_000_000
                                 ,"初始利率":0.03
                                 ,"起息日":"2020-01-03"
                                 ,"利率":{"浮动":["LIBOR1M",0.01,"每月"]}
                                 ,"债券类型":{"过手摊还":None}
                                })
          ,("次级",{"当前余额":2_123_875_534.53
                                 ,"当前利率":0.03
                                 ,"初始余额":2_123_875_534.53
                                 ,"初始利率":0.03
                                 ,"起息日":"2020-01-03"
                                 ,"利率":{"固定":[0.0]}
                                 ,"债券类型":{"过手摊还":None}
                                }))
        ,(("增值税",{"类型":{"百分比费率":["资产池当期利息",0.0325]}})
          ,("服务商费用",{"类型":{"年化费率":["资产池余额",0.02]}}))
        ,{"违约前":[
             ["支付费用限额",["收入分账户"],["服务商费用"],{"应计费用百分比":0.5}]
             ,["支付利息","收入分账户",["A1","A2","A3"]]
             ,["支付费用",["收入分账户"],["服务商费用"]]
             ,["账户转移","收入分账户","本金分账户"]
             ,["支付本金","本金分账户",["A1"]]
             ,["支付本金","本金分账户",["A2"]]
             ,["支付本金","本金分账户",["A3"]]
             ,["支付本金","本金分账户",["次级"]]
             ,["支付收益","本金分账户","次级"]],
         "回款后":[["支付费用",["收入分账户"],["增值税"]]]
         }
        ,(["利息回款","收入分账户"]
          ,["本金回款","本金分账户"]
          ,["早偿回款","本金分账户"]
          ,["回收回款","本金分账户"])
        ,None
    )

某工元
^^^^^

.. code-block:: python


    gy = 信贷ABS(
        "工元乐居2021年第七期"
        ,("2021-03-01","2021-10-15","2021-11-26")
        ,"每月"
        ,(["按揭贷款"
            ,{"放款金额":9961626400,"放款利率":0.0495,"初始期限":218
              ,"频率":"每月","类型":"等额本息"}
              ,{"当前余额":7596981800
              ,"当前利率":0.0495
              ,"剩余期限":-165}]
          ,["按揭贷款"
            ,{"放款金额":330_977.45*10000,"放款利率":0.0495,"初始期限":218
              ,"频率":"每月","类型":"等额本金"}
              ,{"当前余额":239_790.20*10000
              ,"当前利率":0.0495
              ,"剩余期限":-165}]
         )
        ,(("本金分账户",{"余额":0})
          ,("收入分账户",{"余额":0}))
        ,(("A1",{"当前余额":3_650_000_000
                                 ,"当前利率":0.03
                                 ,"初始余额":3_650_000_000
                                 ,"初始利率":0.03
                                 ,"起息日":"2020-01-03"
                                 ,"利率":{"浮动":["LPR5Y",-0.0169,{"重置月份":3}]}
                                 ,"债券类型":{"过手摊还":None}
                                })
          ,("A2",{"当前余额":5_444_000_000
                                 ,"当前利率":0.03
                                 ,"初始余额":5_444_000_000
                                 ,"初始利率":0.03
                                 ,"起息日":"2020-01-03"
                                 ,"利率":{"浮动":["LPR5Y",-0.0091,{"重置期间":"每年","起始":"2022-11-01"}]}
                                 ,"债券类型":{"过手摊还":None}
                                })
          ,("次级",{"当前余额":900_883_783.62
                                 ,"当前利率":0.0
                                 ,"初始余额":2_123_875_534.53
                                 ,"初始利率":0.00
                                 ,"起息日":"2020-01-03"
                                 ,"利率":{"期间收益":0.02}
                                 ,"债券类型":{"权益":None}
                                }))
        ,(("增值税",{"类型":{"百分比费率":["资产池当期利息",0.0325]}})
          ,("服务商费用",{"类型":{"年化费率":["资产池余额",0.02]}})
         ,("执行费用", {"类型":{"周期费用":["每月",599]}})
         )
        ,{"违约前":[
             ["支付费用",["收入分账户"],["执行费用"]]
             ,["支付费用限额",["收入分账户"],["服务商费用"],{"应计费用百分比":0.1}]
             ,["支付利息","收入分账户",["A1","A2"]]
             ,["支付费用",["收入分账户"],["服务商费用"]]
             ,["支付期间收益","收入分账户",["次级"]]
             ,["账户转移","收入分账户","本金分账户"]
             ,["支付本金","本金分账户",["A1"]]
             ,["支付本金","本金分账户",["A2"]]
             ,["支付本金","本金分账户",["次级"]]
             ,["支付收益","本金分账户","次级"]]
         ,"回款后":[["支付费用",["收入分账户"],["增值税"]]]}
        ,(["利息回款","收入分账户"]
          ,["本金回款","本金分账户"]
          ,["早偿回款","本金分账户"]
          ,["回收回款","本金分账户"])
        ,None
    )


建模文件保存/读取
----------------
建议通过python自带的 ``pickle`` 包对建模文件进行存储。

保存
^^^^
建模的内容可以通过调用 ``save()`` 方法将内容保存至本地文件夹。

.. code-block:: python

  ...
  from absbox import API,save
  deal = .... #
  save(deal,"path/to/file")

读取
^^^^
建模的内容可以通过调用 ``load()`` 方法将内容保存至本地文件夹。

.. code-block:: python

  ...
  from absbox.local.china import 信贷ABS
  信贷ABS.load("path/to/file")
