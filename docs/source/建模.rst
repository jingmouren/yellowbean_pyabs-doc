建模
****

建模的过程是把ABS事实性的数据(比如债券信息，资产池，分配规则等)，进行实例化的过程。

目前 ``absbox`` 支持 ``信贷ABS`` 类。

.. _信贷ABS:

信贷ABS
====
.. code-block:: python

   from absbox.local.china import 信贷ABS


产品要素
====
日期
----

按照建模产品对象所处于的产品生命期间对日期进行设置。推荐使用字典方式，语义较为清晰。

.. code-block:: python

  {"封包日":"2021-03-01","起息日":"2021-05-01","首次兑付日":"2021-06-26"
   ,"法定到期日":"2060-12-01","收款频率":"月末","付款频率":["每月",26]} 
 

费用
----

费用类型包括
  * 一次性费用, 例如需要支付的承销费用。
  * 周期性费用, 例如一年一次的跟踪评级费用,或者每个月产生的事务性费用
  * 按照 ``年化费率`` 产生的费用, 目前支持基数 
     *  ``资产池余额``
     * ``资产池初始余额`` 
     * ``债券余额`` 
  * 按照 ``百分比费率`` 产生的费用, 目前支持基数 
     * 或者按照 ``资产池利息`` ,作为基数的增值税计算费用
     * 或者按照 ``违约余额`` , 作为基数计算违约处置费用

建模格式为： ``(费用名称 , {费用描述} )``

示例为设定两个费用，一个按照当期资产池利息金额乘以3.25%。另外一个按照资产池余额的年化2%收取当期费用。

.. code-block:: python

  (("增值税",{"类型":{"百分比费率":["资产池当期利息",0.0325]}})
      ,("服务商费用",{"类型":{"年化费率":["资产池余额",0.02]}}))

资产池
----
用一个列表表示底层资产的清单，目前资产清单包含 ``按揭贷款`` ``消费贷款`` ``租金合同`` ``企业贷款`` .

按揭贷款

.. code-block:: python

  (["按揭贷款"
        ,{"放款金额":9961626400,"放款利率":"放款利率":["浮动",0.085,{"基准":"LPR5Y","利差":0.01,"重置频率":"每月"}],"初始期限":218
          ,"频率":"每月","类型":"等额本息","放款日":"2020-06-01"}
          ,{"当前余额":7596981800
          ,"当前利率":0.0495
          ,"剩余期限":165
          ,"状态":"正常"}]
      ,["按揭贷款"
        ,{"放款金额":330_977.45*10000,"放款利率":["固定",0.045],"初始期限":218
          ,"频率":"每月","类型":"等额本金","放款日":"2020-06-01"}
          ,{"当前余额":239_790.20*10000
          ,"当前利率":0.0495
          ,"剩余期限":165
          ,"状态":"正常"}])

账户
----
账户有两种：
  * 普通账户 -> 表示用于简单的现金收支。
  * 储备账户 -> 储备账户可以锚定一个储备金额数值。在存入金额和取出时，按照预定锚定的金额进行留存。

建模格式为 ``(账户名称,账户属性)``, 例如

.. code-block:: python

  (("本金分账户",{"余额":0})
   ,("收入分账户",{"余额":0}))

另外一种为 ``储备账户`` ，该类账户存在一个目标储备金额,其设置可以通过 ``账户属性`` 进行建模

目标储备金额: 有多种设置方式，例如

  * 单一值： 固定的绝对金额，例如，10000元
    ``("储备账户A",{"余额":0,"类型":{"固定储备金额":1000}})``
  * 公式值： 例如资产池余额的一个百分比，例如资产池余额的 2%
    ``("储备账户B",{"余额":0,"类型":{"目标储备金额":["资产池余额",0.015]}})``

  * 复合值： 例如为 单一值 公式值 两者取大，或者取小

    .. code-block:: python

      ("储备账户C",{"余额":0,"类型":{"较高":[
                                     {"目标储备金额":["资产池余额",0.015]}
                                    ,{"固定储备金额":100}]})
      ("储备账户D",{"余额":0,"类型":{"较低":[
                                     {"目标储备金额":["资产池余额",0.015]}
                                    ,{"固定储备金额":100}]})
      # 甚至可以进行多条件组合
      ("储备账户E",{"余额":0,"类型":{"较低":[{"较高":[
                                            {"目标储备金额":["资产池余额",0.015]}
                                            ,{"固定储备金额":100}]}
                                    ,{"固定储备金额":150}]})
债券
----

建模格式为 ``(债券层级名称,属性)`` ， 其中 ``利率类型`` 分为三种

  * 固定利率   :code:`"利率":{"固定":0.0569}`
  * 浮动利率   :code:`"利率":{"浮动":["LPR5Y",-0.0169,"每月"]}`
  * 期间收益   :code:`"利率":{"期间收益":0.02}`

债券种类众多，包括 ``过手摊还类`` ，``固定摊还`` ，``锁定类`` , ``权益类``：

  * 过手摊还类： 较为常见利随本清式债券。
  * 固定摊还： 预定义固定摊还目标额，限定了每次兑付时候最大的本金还款额。
  * 锁定类： 预定义一个日期，该日期之前都不会偿还本金
  * 权益：  权益类债券，用于次级证券建模, 可以支付超额收益。

.. code-block:: python

    ("A1",{"当前余额":3_650_000_000
                             ,"当前利率":0.03
                             ,"初始余额":3_650_000_000
                             ,"初始利率":0.03
                             ,"起息日":"2020-01-03"
                             ,"利率":{"浮动":["LPR5Y",-0.0169,"每月"]}
                             ,"债券类型":{"过手摊还":None}
                            })
      ,("A2",{"当前余额":5_444_000_000
                             ,"当前利率":0.03
                             ,"初始余额":5_444_000_000
                             ,"初始利率":0.03
                             ,"起息日":"2020-01-03"
                             ,"利率":{"浮动":["LPR5Y",-0.0091,"每月"]}
                             ,"债券类型":{"过手摊还":None}
                            })
      ,("次级",{"当前余额":900_883_783.62
                             ,"当前利率":0.0
                             ,"初始余额":2_123_875_534.53
                             ,"初始利率":0.00
                             ,"起息日":"2020-01-03"
                             ,"利率":{"期间收益":0.02}  # 期间收益必须满足 2%
                             ,"债券类型":{"权益":None}
                            })



分配规则
----

分配规则由 一系列的``分配动作``和``分配条件``组成 

分配动作 
^^^^ 

分配规则描述了一系列SPV资金的收取和支出的动作。包括

  * 支付费用

    * 格式为 ``["支付费用", [资金来源账户列表], [需要支付的费用列表]]`` 其中，
      
      *  ``[资金来源账户列表]``   -> 按照顺序，首先从第一个账户获取可用资金进行支付，以此类推
         
      *  ``[需要支付的费用列表]`` -> 按照列表中的费用，同顺序按照应付比例进行支付

  * 支付费用限额

    * 相比于 ``支付费用`` , 在最后新增一个map列表,用于描述支付费用的上限形式

      * ``应计费用百分比`` , 限制支付应计费用的比例上限
      * ``应计费用金额`` ,  限制支付应计费用的绝对金额
      示例 ``["支付费用限额",["收入分账户"],["服务商费用"],{"应计费用百分比":0.1}]``
  
  * 支付费用收益
    
    * ``[支付费用收益, [资金来源账户列表], [需要支付的费用列表]]`` 把账户内所有金额支付至费用，作为报酬。

    * ``["支付费用收益", [资金来源账户列表], [需要支付的费用列表],{"余额百分比": pct}/{"金额上限": amt}]`` 按照账户余额或者金额上限支付报酬

  * 支付债券利息

    * 格式为 ``["支付利息", 资金来源账户, [需要支付的债券列表] ]``

  * 支付债券本金

    * 格式为 ``["支付本金", 资金来源账户, [需要支付的债券列表] ]``
  
  * 支付剩余债券本金
  
    此行为无论如何都会支付本金，不管是否存在固定摊还的余额限制。

    * 格式为 ``["支付剩余本金", 资金来源账户, [需要支付的债券列表] ]``
  
  * 支付债券收益
  
    一般用于劣后债券的超额收益支付 
  
    * 格式为 ``["支付收益", 资金来源账户, [需要支付的债券列表] ]``

  * 支付债券期间收益

    * 格式为 ``["支付期间收益", 资金来源账户, [需要支付的债券列表] ]``

  * 账户转移
   
    * 格式为 ``["账户转移", 资金来源账户, 目标转入账户 ]``
  
  * 储备账户转移
   
    * 格式为 ``["储备账户转移", 资金来源账户, 目标转入账户, "源储备"|"目标储备" ]``
  
  * 出售资产
   
    * 格式为 ``["出售资产", 计价方式, 目标转入账户 ]``
  
  * 流动性支持 
  
    * 格式为  ``["流动性支持", 增信方名称, 目标转入账户, (?公式) ]`` 
  
  * 流动性支持偿还 

    * 格式为  ``["流动性支持偿还", 目标转出账户, 增信方名称 ]`` 
      
分配条件
^^^^
分配条件用于确定 ``分配动作`` 是否执行。

格式为 
  * ``[<分配条件>，<分配动作>]``
  * ``[<分配条件>，<分配动作1>，<分配动作2>，<分配动作3>....]``

分配条件包括为：

  * ``[<变量>,">",数值]``  -> 只有变量大于数值时，才会执行后续分配动作
  * ``[<变量>,"<",数值]`` -> 只有变量小于数值时，才会执行后续分配动作
  * ``[<变量>,">=",数值]`` -> 只有变量大于等于数值时，才会执行后续分配动作
  * ``[<变量>,"<=",数值]`` -> 只有变量小于等于数值时，才会执行后续分配动作
  * ``[<变量>,"=",数值]`` -> 只有变量等于数值时，才会执行后续分配动作
  * ``["同时满足",<分配条件1>,<分配条件2>]`` -> 只有所有条件满足后，才会执行后续分配动作
  * ``["任意满足",<分配条件1>,<分配条件2>]`` -> 任意条件满足后，会执行后续分配动作

变量包括 
  * ("债券余额",): 
  * ("资产池余额",):
  * ("初始债券余额",):
  * ("初始资产池余额",):
  * ("债券系数",):   -> 债券剩余比率
  * ("资产池系数",):  -> 资产池剩余比例 
  * ("所有账户余额",):
  * ("系数",<变量>,系数): -> 将 变量乘以 一个系数。
  * ("债券余额",[<债券ID>]):
  * ("Min",<变量1>,<变量2>):
  * ("Max",<变量1>,<变量2>):
  * ("合计",[<变量>]):
            

分配规则位置
^^^^


建模方式为一个map, 支持的key为:

  * ``未违约``, 表示动作只有在 处于非违约状态的情况下，在债券支付日执行。
  * ``回款后``, 表示动作只有在 资产池搜集回款后执行。
  * ``清仓回购``, 表示动作只有在 清仓回购条件触发后执行。


示例：

.. code-block:: python

    ,{"未违约":[
         ["支付费用",["收入分账户"],["执行费用"]]
         ,["支付费用限额",["收入分账户"],["服务商费用"],{"应计费用百分比":0.1}]
         ,["支付利息","收入分账户",["A1","A2"]]
         ,["支付费用",["收入分账户"],["服务商费用"]]
         ,["支付期间收益","收入分账户",["次级"]]
         ,["账户转移","收入分账户","本金分账户"]
         ,["支付本金","本金分账户",["A1"]]
         ,["支付本金","本金分账户",["A2"]]
         ,["支付本金","本金分账户",["次级"]]
         ,["支付收益","本金分账户","次级"]]
     ,"回款后":[["支付费用",["收入分账户"],["增值税"]]]
     ,"清仓回购":[....]
     }



建模示例
====

简单优先/劣后结构
----

  * 简单 优先劣后结构 
  * 固定费用 （一次性产生等待付清），例如承销费用
  
.. literalinclude:: deal_sample/test01.py
   :language: python
   :linenos:
   :emphasize-lines: 31-36

附带固定摊还的债券建模
----

.. literalinclude:: deal_sample/test02.py
   :language: python
   :linenos:
   :emphasize-lines: 22-24

次级分润模式 
----

当进行清仓回购的时候，剩余资金按照 3：7 分成比例支付给次级投资者和服务商。

.. literalinclude:: deal_sample/test03.py
   :language: python
   :linenos:
   :emphasize-lines: 42-43


某建元(债券浮动利率)
----

.. literalinclude:: deal_sample/test04.py
   :language: python
   :linenos:
   :emphasize-lines: 24,32,40


某工元(期间收益债券)
----

.. literalinclude:: deal_sample/test05.py
   :language: python
   :linenos:
   :emphasize-lines: 44,55

某存量建元(带清仓回购) 
---- 

.. literalinclude:: deal_sample/test06.py
   :language: python
   :linenos:
   :emphasize-lines: 76


盛世融迪2021年第二期个人汽车抵押贷款(现金流归集表建模)
----
依据第十期受托报告建立，
  * 假设次级的获取所有剩余收益
  * 假设不产生各项报销费用
  * 假设服务商费用年化 0.12%
  * 清仓回购对于正常资产按照 余额进行出售。

本案例假设使用现金流归集表进行建模。

.. literalinclude:: deal_sample/test07.py
   :language: python
   :linenos:
   :emphasize-lines: 8-43

吉时代2022年第三期个人汽车抵押贷款资产支持证券(流动性储备账户)
----
按照发行说明书建立,

* 储备账户金额 为下列两者取高 
   * 资产池余额百分之0.9 
   * 当期应付费用和利息之和3倍 

.. literalinclude:: deal_sample/test08.py
   :language: python
   :linenos:
   :emphasize-lines: 61-67

基于条件的分配执行
----
在分配动作中，当我们把 `[<分配动作>]` 改成 `[[<分配条件>],[<分配动作>]]` 之后，
只有 `[<分配条件>]` 满足的情况下，才会执行后面的分配动作

.. literalinclude:: deal_sample/test09.py
   :language: python
   :linenos:
   :emphasize-lines: 37-39

自定义收款日/分配日 
----
用户可以通过自定义收款日和分配日对现金流进行测算 

* 对于中国的一些节假日调整 
* 特殊的交易条款安排 

另外日期可以通过带有关键字字典传入。 


.. literalinclude:: deal_sample/test10.py
   :language: python
   :linenos:
   :emphasize-lines: 5-7

计息账户 
----
用户可以设定账户的结算利息情况，

* 用于模拟现实银行的活期利息计算  
* 用于模拟投资账户的再投资

.. literalinclude:: deal_sample/test11.py
   :language: python
   :linenos:
   :emphasize-lines: 14

建元2019年第十一期个人住房抵押贷款资产支持证券 
----

.. collapse:: 点击展开

  .. literalinclude:: deal_sample/test12.py
     :language: python
     :linenos:



ABCD公式转移
----

ABCD 是在中国信贷市场常见的账户转移公式。
`absbox` 自带强大的公式定义功能，请参见（30-39），用户可以利用各项变量组合成公式。

.. literalinclude:: deal_sample/test13.py
   :language: python
   :linenos:
   :emphasize-lines: 32-41,44


流动性支持建模
----

流动性支持 指一个第三方主体，为了保证平滑ABS产品的本息兑付，因此在一定额度下，对ABS的账户进行资金垫付行为。垫付金额可以后续偿还。

.. literalinclude:: deal_sample/test14.py
   :language: python
   :linenos:
   :emphasize-lines: 32,38,46




建模文件保存/读取
====
建议通过python自带的 ``pickle`` 包对建模文件进行存储。

保存
----
建模的内容可以通过调用 ``save()`` 方法将内容保存至本地文件夹。

.. code-block:: python

  ...
  from absbox import API,save
  deal = .... #
  save(deal,"path/to/file")

读取
----
建模的内容可以通过调用 ``load()`` 方法将内容保存至本地文件夹。

.. code-block:: python

  ...
  from absbox.local.china import 信贷ABS
  信贷ABS.load("path/to/file")
